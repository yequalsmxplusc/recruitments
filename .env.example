/backend
JWT_SECRET=your_very_secure_secret_here
ADMIN_USERNAME=admin
ADMIN_PASSWORD_HASH=$(cargo run --bin hash_password)

# <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
#   <path fill="currentColor" fill-rule="evenodd" d="M12 4a8 8 0 0 0-6.895 12.06l.569.718-.697 2.359 2.32-.648.379.243A8 8 0 1 0 12 4ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10a9.96 9.96 0 0 1-5.016-1.347l-4.948 1.382 1.426-4.829-.006-.007-.033-.055A9.958 9.958 0 0 1 2 12Z" clip-rule="evenodd"/>
#   <path fill="currentColor" d="M16.735 13.492c-.038-.018-1.497-.736-1.756-.83a1.008 1.008 0 0 0-.34-.075c-.196 0-.362.098-.49.291-.146.217-.587.732-.723.886-.018.02-.042.045-.057.045-.013 0-.239-.093-.307-.123-1.564-.68-2.751-2.313-2.914-2.589-.023-.04-.024-.057-.024-.057.005-.021.058-.074.085-.101.08-.079.166-.182.249-.283l.117-.14c.121-.14.175-.25.237-.375l.033-.066a.68.68 0 0 0-.02-.64c-.034-.069-.65-1.555-.715-1.711-.158-.377-.366-.552-.655-.552-.027 0 0 0-.112.005-.137.005-.883.104-1.213.311-.35.22-.94.924-.94 2.16 0 1.112.705 2.162 1.008 2.561l.041.06c1.161 1.695 2.608 2.951 4.074 3.537 1.412.564 2.081.63 2.461.63.16 0 .288-.013.4-.024l.072-.007c.488-.043 1.56-.599 1.804-1.276.192-.534.243-1.117.115-1.329-.088-.144-.239-.216-.43-.308Z"/>
# </svg>

# # Deploying Your Rust/Yew Application to Vercel

# Since Vercel primarily supports JavaScript/Node.js applications out of the box, we'll need to use a custom approach to deploy your Rust/Yew application. Here's a step-by-step guide:

# ## Option 1: Deploy Frontend to Vercel + Backend Elsewhere

# ### Frontend Deployment (Vercel)

# 1. **Prepare your frontend**:
#    ```bash
#    cd frontend
#    trunk build --release
#    ```

# 2. **Create `vercel.json`** in your frontend directory:
#    ```json
#    {
#      "version": 2,
#      "builds": [
#        {
#          "src": "dist/index.html",
#          "use": "@vercel/static"
#        }
#      ],
#      "rewrites": [
#        {
#          "source": "/(.*)",
#          "destination": "/index.html"
#        }
#      ]
#    }
#    ```

# 3. **Push to GitHub** and connect your repository to Vercel:
#    - Go to Vercel dashboard
#    - Click "New Project"
#    - Select your repository
#    - Configure settings:
#      - Framework: "Other"
#      - Build Command: `cd frontend && trunk build --release`
#      - Output Directory: `frontend/dist`
#    - Deploy!

# ### Backend Deployment (Recommended Alternatives)

# 1. **Render.com** (Free tier available):
#    - Create a new Web Service
#    - Select your backend directory
#    - Set build command: `cargo build --release`
#    - Set start command: `./target/release/recruitment-backend`
#    - Add environment variables from your `.env` file

# 2. **Fly.io** (Great for Rust apps):
#    ```bash
#    flyctl launch
#    # Follow prompts, then:
#    flyctl deploy
#    ```

# ## Option 2: Full Stack on Vercel with Serverless Functions

# This approach uses Vercel's serverless functions for the backend:

# 1. **Modify project structure**:
#    ```
#    .
#    ├── api/
#    │   └── applicants.rs (serverless function)
#    ├── frontend/
#    │   └── (your Yew frontend)
#    └── vercel.json
#    ```

# 2. **Create a serverless function** (`api/applicants.rs`):
#    ```rust
#    use http::{Response, StatusCode};
#    use vercel_runtime::{Body, Error, Request, Response as VercelResponse};

#    pub async fn handler(_req: Request) -> Result<VercelResponse<Body>, Error> {
#        Response::builder()
#            .status(StatusCode::OK)
#            .header("Content-Type", "application/json")
#            .body(Body::from(r#"{"message":"Hello from Rust!"}"#))
#            .map_err(Into::into)
#    }
#    ```

# 3. **Update `vercel.json`**:
#    ```json
#    {
#      "version": 2,
#      "builds": [
#        {
#          "src": "frontend/dist/**",
#          "use": "@vercel/static"
#        },
#        {
#          "src": "api/**/*.rs",
#          "use": "@vercel/rust"
#        }
#      ],
#      "routes": [
#        {
#          "src": "/api/(.*)",
#          "dest": "/api/applicants"
#        },
#        {
#          "src": "/(.*)",
#          "dest": "/frontend/dist/index.html"
#        }
#      ]
#    }
#    ```

# 4. **Install Vercel CLI**:
#    ```bash
#    npm install -g vercel
#    ```

# 5. **Deploy**:
#    ```bash
#    vercel
#    ```

# ## Important Notes

# 1. **Limitations**:
#    - Vercel's serverless functions have execution time limits (10s on free tier)
#    - Rust functions may have cold start delays
#    - No persistent storage - consider using a database

# 2. **Recommended Alternative Architecture**:
#    ```
#    Frontend: Vercel (Static Yew/WASM)
#    Backend:  Fly.io/Render.com (Rust Actix)
#    Database: Supabase/MongoDB Atlas
#    ```

# 3. **Environment Variables**:
#    - Set them in Vercel dashboard under Project Settings
#    - For frontend, prefix with `NEXT_PUBLIC_` to expose to browser

# ## Full Deployment Script

# For the most reliable deployment (frontend on Vercel, backend elsewhere):

# 1. **Backend** (Fly.io example):
#    ```bash
#    # In your backend directory
#    flyctl launch
#    # Follow prompts, then:
#    flyctl secrets set JWT_SECRET=your_secret ADMIN_PASSWORD_HASH=your_hash
#    flyctl deploy
#    ```

# 2. **Frontend**:
#    ```bash
#    # In your frontend directory
#    echo "VITE_API_URL=https://your-backend-url.fly.dev" > .env
#    trunk build --release
#    vercel
#    ```

# 3. **Update CORS** in your backend:
#    ```rust
#    // In main.rs
#    .wrap(
#        Cors::default()
#            .allowed_origin("https://your-vercel-app.vercel.app")
#            .allowed_methods(vec!["GET", "POST"])
#    )
#    ```

# ## Troubleshooting

# 1. **WASM issues**:
#    - Ensure `trunk` is properly building your app
#    - Check browser console for errors

# 2. **API connection problems**:
#    - Verify CORS settings
#    - Check network tab for failed requests

# 3. **Environment variables**:
#    - Remember to set them in both Vercel and your backend host